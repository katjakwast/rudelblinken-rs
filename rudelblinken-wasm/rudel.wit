package rudel:base@0.0.1;
/// Rudel base is the core  
@since(version = 0.0.1)
interface base {
    /// Sleep for a given amount of time.
    ///
    /// You need to call sleep periodically, as the watchdog will kill you if you dont
    @since(version = 0.0.1)
    sleep: func(micros: u32) -> ();

    /// Returns the number of microseconds that have passed since boot
    @since(version = 0.0.1)
    time: func() -> u64;


    /// Check if the host base module is implemented
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link.
    /// If this function returns false you should not use any of the other functions

    @since(version = 0.0.1)
    has-host-base: func() -> bool;

    /// Level of a log entry
    @since(version = 0.0.1)
    variant log-level {
        error,
        warning,
        info,
        debug,
        trace,
    }


        /// Log a message
    @since(version = 0.0.1)
    log: func(level: u32, message: string)  -> ();

        /// The name for this host. You can assume that this is unique
    @since(version = 0.0.1)
    get-name: func() -> ();
}

/// Use this interface to control the LED brightness
@since(version = 0.0.1)
interface led {
    /// Check if the led module is implemented
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link.
    /// If this function returns false you should not use any of the other functions
    @since(version = 0.0.1)
    has-led: func() -> bool;
    
    /// Lowlevel function to set the intensities of a single LED
    ///
    /// The values are in lux in the main direction of the LED
    ///
    /// You should probably not use this function directly, but use a higher level abstraction instead
    @since(version = 0.0.1)
    set-led: func(id: u16, lux: list<u16>) -> ();

    /// Lowlevel function to set the intensities of all LEDs
    ///
    /// The values are in lux in the main direction of the LED
    ///
    /// You should probably not use this function directly, but use a higher level abstraction instead
    ///
    /// If your list of values is longer then the amount of available LEDS,
    /// all extra values are dropped. If your list is shorter than the
    /// number of available LEDS, the last color is repeated.
    @since(version = 0.0.1)
    set-leds: func(lux: list<u16>) -> ();

    /// Describes the directions a LED is pointing in
    ///
    /// The vector describes the main direction of the LED, if it has on If the LED has no main direction, that will be zero.
    /// Additional directions are used to describe the direction of the LED.
    ///
    /// From the wearers perspective:
    /// * Negative x is left
    /// * Negative y is down
    /// * Negative z is back
    ///
    /// Additional directions are used to describe the direction of the LE
    @since(version = 0.0.1)
    record direction {
        x: s8,
        y: s8,
        z: s8,
        additional-directions: additional-directions,
    }
    
    /// Generic direction info
    @since(version = 0.0.1)
    flags additional-directions {
        left,
        right,
        up,
        down,
        front,
        back,
    }
    /// Describes the color of a LED in RGB
    record color {
        r: u8,
        g: u8,
        b: u8,
    }

    /// Information about the shape of the LED
    record shape {
        /// The width of the shape in mm
        /// 
        /// 0 for point sources
        width: u16,
        /// The height of the shape in mm
        ///
        /// 0 for point sources
        height: u16,
        /// The diffusion area of the LED in mm^2
        ///
        /// This is the area of the LED that is directly visible when viewing from
        /// the main direction when projected on a flat surface. This distinction
        /// only matters for non-flat segments.
        diffusion-area: u16,
        /// The maximum lux the brightest 2mmx2mm area of this LED can produce
        /// when viewed from the main direction.
        ///
        /// For point sources this will be identical to max-intensity
        ///
        /// Useful for limiting how annoying the LED is.
        max-intensity: u16,
        /// The angle at which the LED intensity drops to 50%
        angle: u16,
    }

    record led {
        /// Peak wavelength of the LED
        peak-wavelength: u16,
        /// Perceived color of the LED
        color: color,
        /// The maximum lux this LED can produce
        max-intensity: u16,

        /// Information about the shape of the LED
        shape: shape,

        /// The main direction of the LED
        direction: direction,
    }

    /// Get information about a specific LED
    led-info: func(id: u32) -> led;
    /// Get information about the number of LEDs
    led-count: func() -> u32;
}

/// Control ble stuff
interface ble {
    /// Check if the ble module is implemented
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link.
    /// If this function returns false you should not use any of the other functions
    @since(version = 0.0.1)
    has-ble: func() -> bool;

/// Configure the BLE advertisments
record advertisment-settings {
    min-interval: u16,
    max-interval: u16,
}
/// The data to be sent in the advertisment
type advertisment-data = list<u8>;

  configure-ble-advertisment: func(settings: advertisment-settings) -> ();
  configure-ble-advertisment-data: func(settings: advertisment-data) -> ();
}

interface ble-guest {
    /// Check if the ble module is implemented
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link.
    /// If this function returns false you should not use any of the other functions
    @since(version = 0.0.1)
    has-ble-guest: func() -> bool;
}

world rudel {
    import base;
    import led;
    import ble;
}